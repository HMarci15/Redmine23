// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Redmine.data;

#nullable disable

namespace Redmine.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240416140822_UpdateInitial")]
    partial class UpdateInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice.johnson@example.com",
                            Name = "Alice Johnson"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob.williams@example.com",
                            Name = "Bob Williams"
                        });
                });

            modelBuilder.Entity("Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            Name = "John Doe",
                            Password = "password123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith",
                            Password = "password456"
                        });
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("typeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("typeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description for Project 1",
                            Name = "Project 1",
                            typeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description for Project 2",
                            Name = "Project 2",
                            typeId = 2
                        });
                });

            modelBuilder.Entity("ProjectDeveloper", b =>
                {
                    b.Property<int>("DeveloperId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DeveloperId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDevelopers");

                    b.HasData(
                        new
                        {
                            DeveloperId = 1,
                            ProjectId = 1
                        },
                        new
                        {
                            DeveloperId = 2,
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Type A"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Type B"
                        });
                });

            modelBuilder.Entity("Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ManagerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Deadline = new DateTime(2024, 4, 23, 16, 8, 21, 984, DateTimeKind.Local).AddTicks(2254),
                            Description = "Description for Task 1",
                            ManagerId = 1,
                            Name = "Task 1",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Deadline = new DateTime(2024, 4, 30, 16, 8, 21, 984, DateTimeKind.Local).AddTicks(2322),
                            Description = "Description for Task 2",
                            ManagerId = 2,
                            Name = "Task 2",
                            ProjectId = 2
                        });
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.HasOne("ProjectType", "Type")
                        .WithMany("Projects")
                        .HasForeignKey("typeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProjectDeveloper", b =>
                {
                    b.HasOne("Developer", "Developer")
                        .WithMany()
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Developer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Task", b =>
                {
                    b.HasOne("Manager", "Manager")
                        .WithMany("Tasks")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Manager", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectType", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
